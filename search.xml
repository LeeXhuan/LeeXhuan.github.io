<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[NVM 使用相关说明]]></title>
    <url>%2F2019%2F03%2F21%2FNVM-%E4%BD%BF%E7%94%A8%E7%9B%B8%E5%85%B3%E8%AF%B4%E6%98%8E%2F</url>
    <content type="text"><![CDATA[一. nvm是什么Node版本的迭代速度很快，版本很多，不同项目对 node的依赖不同，故需要切换不同node版本 目前有n和nvm这两个工具可以对Node进行无痛升级，n 命令是作为一个 node 的模块而存在，而 nvm 是一个独立于 node/npm 的外部 shell 脚本，因此 nvm 命令相比 n更加全面，n更有局限性。 nvm 是 Mac 下的 node 管理工具，有点类似管理 Ruby 的 rvm，如果是需要管理 Windows 下的 node，官方推荐是使用 nvmw 或 nvm-windows 。 我按nvm提供的文档来完成nvm及node多个版本的安装,因为在安装过程中遇到不少坑,特在此总结安装中遇到的各种坑 二. 下载安装与使用 nvm 下载nvm-windows下载地址：nvm-windows选择第一个 nvm-noinstall.zip ，然后解压在系统盘（建议放D盘）。我放的目录路径是D:\NodeNVM\nvm。解压出来的文件有：12345+ elevate.cmd+ elevate.vbs+ install.cmd+ LICENSE+ nvm.exe 备注：windows下要设置显示文件类型的扩展名，这样才能看到上述文件的后缀 nvm 安装双击 install.cmd ，是以控制台形式显示的，第一下直接按回车，然后会在d盘根目录产生settings.txt，把这个文件放进刚刚解压的那个目录，然后修改settings.txt内容，改成如下：1234root: D:\NodeNVM\nvm path: D:\NodeNVM\nodejs arch: 64 proxy: none 倘若上面方法行不通，因为打开 install.cmd按下回车后，显示拒绝访问注册表路径，并弹出一个settings.txt。此时关掉控制台及文本，在D:\NodeNVM\nvm目录里新建一个文件settings.txt，然后复制上面的内容即可。1234root ： nvm的存放地址path ： 存放指向node版本的快捷方式，使用nvm的过程中会自动生成。一般写的时候与nvm同级。arch ： 电脑系统是64位就写64,32位就写32proxy ： 代理 nvm 环境变量配置以控制台方法执行成功的，在环境变量里会自动配置了 NVM_HOME 和 NVM_SYMLINK 。 直接创建settings文件的可以在环境变量里创建 NVM_HOME 和 NVM_SYMLINK，并添加路径。 若环境变量配置有问题，可以直接按下面两种方式来手动配置第一种：右键单击 我的电脑 - 属性 - 高级系统设置 - 高级 -环境变量 - 系统变量 中新建，输入对应变量名，变量值即可12NVM_HOME： D:\NodeNVM\nvmNVM_SYMLINK ：D:\NodeNVM\nodejs 第二种：windows+r 弹出输入框后，输入： sysdm.cpl，同第一种 高级 以后的操作（步骤稍微简单一点点）最后在上面的用户变量中的PATH里加上1;%NVM_HOME%;%NVM_SYMLINK%;。 nvm基本操作打开cmd窗口输入命令：nvm -v ，查看当前nvm的版本信息。 nvm install latest // 下载最新的 node 版本 v7.2.0 nvm install 8.5.0// 安装不同版本 nvm install 6.11.3 32 // 默认是64位，32位需指定 备注： 如果你的电脑系统是32 位的，那么在下载nodejs版本的时候，一定要指明 32 如： nvm install 5.11.0 32 这样在32位的电脑系统中，才可以使用，默认是64位的。 nvm uninstall 6.11.0 #卸载对应的版本 nvm use 8.5.0 // 引入使用 nvm list // 查看已安装的 node 版本 nvm ls available//列出远程服务器上所有的可用版本1234 8.5.0 8.0.0 * 6.11.3 (Currently using 64-bit executable)*表示当前正在使用的node版本号 每次执行切换的时候，系统都会把 node 的可执行文件链接放到特定版本的文件上。 安装node第一个坑：安装过node版本的,先卸载了在开始看现在的安装流程。第一种方式：使用命令行下载，直接输入：nvm install [版本号]1nvm install 6.11.0 要下载最新版的可以直接输nvm install latest下载完成后，在控制台输入：nvm use [版本号]123456789nvm use 6.11.3//下面会显示如下内容Now using node v6.11.3 (64-bit)//查看node版本是否是自己需要的node -v//显示当面使用版本号即表示毛病了v6.11.3 第二种方式：直接上官网下载所需安装包第二个坑：刚开始我是用命令行的方式安装的node所需版本，但是安装的node启动项目一直有问题，后同事告知命令行下载的版本很可能丢失文件，导致各种奇怪的问题，直接去官网下载安装包按下面操作流程即可。 下载安装包之后，将文件解压到D:\NodeNVM\nvm中 重命名，按原文件名更改为如下所示即可（严格按如下方式更改名字）12//原文件名 =&gt; 新文件名node-v8.0.0-win-x64 =&gt; v8.0.0 所需要node下载完成后，按上面方式查看、切换版本如果你是第一次下载，在use之前，D:\NodeNVM目录下是没有nodejs这个文件夹的，在输入比如： nvm use 6.11.3 之后，你会发现，D:\NodeNVM目录下多了一个nodejs文件夹，这个文件夹不是单纯的文件夹，它是一个快捷方式，指向了 D:\NodeNVM\nvm 里的 v6.11.3 文件夹。同样的咱们可以下载其他版本的nodejs，这样通过命令:nvm use 版本号 比如：nvm use 5.11.0就可以轻松实现版本切换了。注意：切换不同的node版本以后，用管理员身份打开命令行，运行npm -g -d i windows-build-tools，以解决window中某些不能用的命令的问题 二. 安装 cnpm因为npm安装插件是从国外服务器下载，受网络影响大，可能出现异常,所以可以使用淘宝开发的淘宝NPM镜像，同步频率目前为 10分钟 一次。 通过 config 配置指向国内镜像源12npm config set registry http://registry.cnpmjs.org //配置指向源npm info express //下载安装第三方包 通过 npm 命令指定下载源1npm --registry http://registry.cnpmjs.org info express 在配置文件 ~/.npmrc 文件写入源地址12345nano ~/.npmrc //打开配置文件registry =https://registry.npm.taobao.org //写入配置文件npm install -g cnpm --registry=https://registry.npm.taobao.orgnpm install -g cnpm --registry=http://r.cnpmjs.org 三.使用node启动项目npm i （npm install 的简写）安装依赖时候，后面加上 -d可以看到文件安装进程和状态若安装文件中出现状态304且报错，直接去D:\NodeNVM\npm-cache中，将缓存文件全部删除]]></content>
      <categories>
        <category>使用说明</category>
      </categories>
      <tags>
        <tag>NVM</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Cmder安装笔记]]></title>
    <url>%2F2019%2F03%2F21%2Fcmder%2F</url>
    <content type="text"><![CDATA[Cmder安装笔记Cmder快捷键 右键管理添加（方法一）下载注册表文件cmder_context_enable.reg123456789101112131415Windows Registry Editor Version 5.00[HKEY_CLASSES_ROOT\Directory\Background\shell\cmder] @="Open in Cmder" "Icon"="C:\\cmder\\Cmder.exe,0"[HKEY_CLASSES_ROOT\Directory\Background\shell\cmder\command] @="\"C:\\cmder\\Cmder.exe\" \"%V\""[HKEY_CLASSES_ROOT\Directory\shell\cmder] @="Open in Cmder" "Icon"="C:\\cmder\\Cmder.exe,0"[HKEY_CLASSES_ROOT\Directory\shell\cmder\command] @="\"C:\\cmder\\Cmder.exe\" \"%1\"" 修改注册表中程序目录地址 运行注册表 添加（方法二）1、把 Cmder 加到环境变量 把Cmder.exe存放的目录添加到系统环境变量；加完之后,Win+r一下输入cmder,即可。 2、添加 cmder 到右键菜单：环境变量添加后，在任意文件夹中即可打开Cmder，上一步的把 Cmder 加到环境变量就是为此服务的, 在管理员权限的终端输入以下语句即可: 1Cmder.exe /REGISTER ALL 3、为Cmder.exe创建快捷方式，右击Cmder.exe选择“创建快捷方式”点击即可，以后打开Cmder.exe只要点击桌面对应的快捷方式即可 删除下载注册表文件cmder_context_disable.reg1234Windows Registry Editor Version 5.00[-HKEY_CLASSES_ROOT\Directory\Background\shell\cmder][-HKEY_CLASSES_ROOT\Directory\shell\cmder] 运行注册表 常见问题中文乱码: 进入Settings&gt;Startup&gt;Environment,添加chcp 65001变更为utf-8.重启即可]]></content>
      <categories>
        <category>使用说明</category>
      </categories>
      <tags>
        <tag>Cmder</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Git 中 SSH key 生成步骤]]></title>
    <url>%2F2019%2F03%2F21%2Fgit-sshkey%2F</url>
    <content type="text"><![CDATA[Git 中 SSH key 生成步骤由于本地Git仓库和GitHub仓库之间的传输是通过SSH加密的，所以必须要让github仓库认证你SSH key，在此之前，必须要生成SSH key 第1步：创建SSH Key。 在windows下查看c盘-&gt;用户-&gt;自己的用户名-&gt;.ssh下是否有id_rsa、id_rsa.pub文件，如果没有需要手动生成。打开git bash，在控制台中输入以下命令。 1$ ssh-keygen -t rsa -C "youremail@example.com" 密钥类型可以用 -t 选项指定。如果没有指定则默认生成用于SSH-2的RSA密钥。这里使用的是rsa。 同时在密钥中有一个注释字段，用-C来指定所指定的注释，可以方便用户标识这个密钥，指出密钥的用途或其他有用的信息。所以在这里输入自己的邮箱或者其他都行。 输入完毕后程序同时要求输入一个密语字符串(passphrase)，空表示没有密语。接着会让输入2次口令(password)，空表示没有口令。3次回车即可完成当前步骤，此时c盘&gt;用户&gt;自己的用户名&gt;.ssh目录下已经生成好了。 第2步：登录github。 打开setting-&gt;SSH keys，点击右上角 New SSH key，把生成好的公钥id_rsa.pub放进 key输入框中，再为当前的key起一个title来区分每个key。 避免每次都需要输入用户名和密码1$ git config --global credential.helper store]]></content>
      <categories>
        <category>使用说明</category>
      </categories>
      <tags>
        <tag>SSH-key</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[sass安装笔记]]></title>
    <url>%2F2019%2F03%2F21%2Fsass-installation-and-use%2F</url>
    <content type="text"><![CDATA[环境的配置 下载Ruby 安装在c盘 勾选 自动配置环境变量 打开 开始安装sass 打开电脑的Ruby命令终端，输入下面的命令： 1gem install sass 文件下载安装 1gem install http://rubygems.org/gems/sass Gem instal 本地下载的sass路径 淘宝 RubyGems镜像安装 Sass 1234gem sources --remove https://rubygems.org/gem sources -a http://ruby.taobao.org/ 注意是http不是httpsgem sources -l 查询 sass的版本 1sass -v 更新sass 1gem update sass 卸载 1gem uninstall sass 语法 老语法：.sass为扩展名 无大括号 无分号 新语法： .scss为扩展名 编译 命令编译 GUI工具编译 自动化编译 命令编译 单文件sass &lt;要编译的Sass文件路径&gt;/style.scss:&lt;要输出CSS文件路径&gt;/style.css Eg:sass E:\微信混合开发\sass\common.scss:E:\微信混合开发\css\css.css 多文件 sass sass/:css/ 每次都需要重新 watct监视sass –watch &lt;要编译的Sass文件路径&gt;/style.scss:&lt;要输出CSS文件路径&gt;/style.cssEg:sass --watch E:\微信混合开发\sass\common.scss:E:\微信混合开发\css\css.css GUI Koala CodeKit Grunt 和 Gulp 自动化在Sass的编译的过程中 是不支持“GBK”编码的。所以在创建 Sass 文件时，就需要将文件编码设置为“utf-8”。 输出方式： 嵌套输出方式 nested --style nested 展开输出方式 expanded --style expanded 紧凑输出方式 compact --style compact 压缩输出方式 compressed --style compressed 语法:SASS允许使用变量，所有变量以$开头。 1$blue : #1875e7; `$`声明变量 `blue `变量名称 `#1875e7` 变量值 作用域的概念12345678910111213$color: orange !default; //定义全局变量.block &#123; color: $color;&#125;.em&#123; $color: red; //定义局部变量 a&#123; color: $color; //调用局部变量 &#125;&#125;span&#123; color: $color;&#125; 选择器嵌套 选择器嵌套 属性嵌套 伪类嵌套(和属性选择器很相识) 宏的概念(函数)带参数 不带参数 带默认值 多个参数 1234567891011121314151617@mixin border-radius-5px&#123; border-radius: 5px;&#125;.button&#123; @include border-radius-5px;&#125;@mixin border-radius($radius)&#123; border-radius:$radius ;&#125;.box&#123; @include border-radius(10px)&#125;@mixin border-setborder($radius:5px)&#123; border-radius: $radius;&#125; 声明关键字 `mixin` 123456@mixin border-radius&#123; border-radius:3px&#125;Button&#123; @include border-radius;&#125; 继承 关键字`extend` 123.circle&#123; border-radius:50%&#125; 占位符 `%`(零时变量) 不被继承不编译 123%center:&#123; text-aline:center;&#125; 如果你的代码块中涉及到变量，建议使用混合宏来创建相同的代码块。 如果你的代码块不需要专任何变量参数，而且有一个基类已在文件中存在，那么建议使用Sass 的继承。 占位符是独立定义，不调用的时候是不会在 CSS 中产生任何代码；继承是首先有一个基类存在，不管调用与不调用，基类的样式都将会出现在编译出来的 CSS 代码中。 如果变量需要镶嵌在字符串之中，就必须需要写在#{}之中。1234 $side : left;.rounded &#123; border-#&#123;$side&#125;-radius: 5px; &#125; 计算功能SASS允许在代码中使用算式： 12345body &#123; margin: (14px/2); top: 50px + 100px; right: $var * 10%;&#125;]]></content>
      <categories>
        <category>使用说明</category>
      </categories>
      <tags>
        <tag>sass</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JQuery]]></title>
    <url>%2F2019%2F03%2F21%2Fjquery-merit-and-demerit%2F</url>
    <content type="text"><![CDATA[1.什么是JQuery? JQuery是一个优秀的javascript框架。 JQuery是继Prototype之后又一个优秀的Javascript框架。其宗旨是——WRITE LESS,DO MORE,写更少的代码,做更多的事情。它是轻量级的js库，这是其它的js库所不及的，它兼容CSS3，还兼容各种常用浏览器。 JQuery是一个快速的，简洁的JavaScript库，使用户能更方便地处理HTMLdocuments、events、实现动画效果，并且方便地为网站提供AJAX交互。 JQuery还有一个比较大的优势是，它的文档说明很全，而且各种应用也说得很详细，同时还有许多成熟的插件可供选择。JQuery能够使用户的html页保持代码和html内容分离，也就是说，不用再在html里面插入一堆js来调用命令了，只需定义id即可。 2.JQuery的特点1) 一款轻量级的js框架。JQuery核心js文件才几十kb，不会影响页面加载速度。与Extjs相比要轻便的多。2) 丰富的DOM选择器(CSS1-3 + XPath)JQuery的选择器用起来很方便，好比要找到某个dom对象的相邻元素js可能要写好几行代码，而JQuery一行代码就搞定了，再比如要将一个表格的隔行变色，JQuery也是一行代码搞定。3) 链式表达式。JQuery的链式操作可以把多个操作写在一行代码里，更加简洁。4) 事件、样式、动画支持。JQuery还简化了js操作css的代码，并且代码的可读性也比js要强。5) Ajax操作支持。JQuery简化了AJAX操作，后台只需返回一个JSON格式的字符串就能完成与前台的通信。6) 跨浏览器兼容。JQuery基本兼容了现在主流的浏览器，不用再为浏览器的兼容问题而伤透脑筋。7) 插件扩展开发。JQuery有着丰富的第三方的插件，例如：树形菜单、日期控件、图片切换插件、弹出窗口等等基本前台页面上的组件都有对应插件，并且用JQuery插件做出来的效果很炫，并且可以根据自己需要去改写和封装插件，简单实用。8) 可扩展性强。JQuery提供了扩展接口：JQuery.extend(object),可以在JQuery的命名空间上增加新函数。JQuery的所有插件都是基于这个扩展接口开发的。 3.JQuery的优缺点1.JQuery优点 JQuery实现脚本与页面的分离在HTML代码中，我们还经常看到类似这样的代码：1&lt;form&gt;&lt;/form&gt; 即使validate()函数可以被放置在一个外部文件中，实际上我们依然是把页面与逻辑和事件混杂在一起。jQuery让你可以将这两部分分离。借助于jQuery，页面代码将如下所示： &lt;form&gt;&lt;/form&gt;接下来，一个单独的JS文件将包含以下事件提交代码：123$("myform").submit(function()&#123; ...your code here )&#125; 这样我们可以实现灵活性非常强的清晰页面代码。jQuery让JavaScript代码从HTML页面代码中分离出来，就像数年前CSS让样式代码与页面代码分离开一样。 .最少的代码做最多的事情最少的代码做最多的事情，这是jQuery的口号，而且名副其实。使用它的高级selector，开发者只需编写几行代码就能实现令人惊奇的效果。开发者无需过于担忧浏览器差异，它除了还完全支持Ajax，而且拥有许多提高开发者编程效率的其它抽象概念。jQuery把JavaScript带到了一个更高的层次。以下是一个非常简单的示例：1$("p.neat").addClass("ohmy").show("slow"); 通过以上简短的代码，开发者可以遍历“neat”类中所有的元素，然后向其增加“ohmy”类，同时以动画效果缓缓显示每一个段落。开发者无需检查客户端浏览器类型，无需编写循环代码，无需编写复杂的动画函数，仅仅通过一行代码就能实现上述效果。 .性能支持比较好在大型JavaScript框架中，jQuery对性能的理解最好。尽管不同版本拥有众多新功能，其最精简版本只有18KB大小，这个数字已经很难再减少。jQuery的每一个版本都有重大性能提高。如果将其与新一代具有更快JavaScript引擎的浏览器(如火狐3和谷歌Chrome)配合使用，开发者在创建富体验Web应用时将拥有全新速度优势。 .它是一个“标准”之所以使用引号，是以为jQuery并非一个官方标准。但是业内对jQuery的支持已经非常广泛。谷歌不但自己使用它，还提供给用户使用。另外戴尔、新闻聚合网站Digg、WordPress、Mozilla和许多其它厂商也在使用它。微软甚至将它整合到Visual Studio中。如此多的重量级厂商支持该框架，用户大可以对其未来放心，大胆的对其投入时间。 .插件发开基于jQuery开发的插件目前已经有大约数千个。开发者可使用插件来进行表单确认、图表种类、字段提示、动画、进度条等任务。jQuery社区已经成长为一个生态系统。这一点进一步证明了上一条理由，它是一个安全的选择。而且，jQuery正在主动与“竞争对手”合作，例如Prototype。它们似乎在推进JavaScript的整体发展，而不仅仅是在图谋一己之私。 .节约学习成本当然要想真正学习jQuery，开发者还是需要投入一点时间，尤其是如果要编写大量代码或自主插件的话，更是如此。但是，开发者可以采取“各个击破”的方式，而且jQuery提供了大量示例代码，入门是一件非常容易的事情。建议开发者在编写某类代码前，首先看一下是否有类似插件，然后看一下实际的插件代码，了解一下其工作原理。简而言之，学习jQuery不需要开发者投入太多，就能够迅速开始开发工作，然后逐渐提高技巧。 .让JS编程变得有趣发现使用jQuery是一件充满乐趣的事情。它简洁而强大，开发者能够迅速得到自己想要的结果。它解决了许多JavaScript问题和难题。通过一些基础性的改进，开发者可以真正去思考开发下一代Web应用，不再因为语言或工具的差劲而烦恼。相信它的“最少的代码做最多的事情”口号。 2.JQuery的缺点.不能向后兼容。每一个新版本不能兼容早期的版本。举例来说，有些新版本不再支持某些selector，新版jQuery却没有保留对它们的支持，而只是简单的将其移除。这可能会影响到开发者已经编写好的代码或插件。 .插件兼容性。与上一点类似，当新版jQuery推出后，如果开发者想升级的话，要看插件作者是否支持。通常情况下，在最新版jQuery版本下，现有插件可能无法正常使用。开发者使用的插件越多，这种情况发生的几率也越高。我有一次为了升级到jQuery 1.3，不得不自己动手修改了一个第三方插件。 .多个插件冲突。在同一页面上使用多个插件时，很容易碰到冲突现象，尤其是这些插件依赖相同事件或selector时最为明显。这虽然不是jQuery自身的问题，但却又确实是一个难于调试和解决的问题。 .jQuery的稳定性。jQuery没有让浏览器崩溃，这里指的是其版本发布策略。jQuery 1.3版发布后仅过数天，就发布了一个漏洞修正版1.3.1。他们还移除了对某些功能的支持，可能会影响许多代码的正常运行。我希望类似修改不要再出现。 .对动画和特效的支持差。在大型框架中，jQuery核心代码库对动画和特效的支持相对较差。但是实际上这不是一个问题。目前在这方面有一个单独的jQuery UI项目和众多插件来弥补此点。 4.JQuery使用方法(1).JQuery选择器选择网页元素jQuery的基本设计和主要用法，就是”选择某个网页元素，然后对其进行某种操作”。这是它区别于其他函数库的根本特点。使用jQuery的第一步，往往就是将一个选择表达式，放进构造函数jQuery()(简写为$)，然后得到被选中的元素。 (2).改变结果集如果选中多个元素，jQuery提供过滤器，可以缩小结果集；有一些时候，我们需要从结果集出发，移动到附近的相关元素，jQuery也提供了在DOM树上的移动方法。 (3).链式操作选中网页元素以后，就可以对它进行某种操作。jQuery允许将所有操作连接在一起，以链条的形式写出来。这是jQuery最令人称道、最方便的特点。它的原理在于每一步的jQuery操作，返回的都是一个jQuery对象，所以不同操作可以连在一起。 (4).元素的操作：取值和赋值操作网页元素，最常见的需求是取得它们的值，或者对它们进行赋值。jQuery使用同一个函数，来完成取值(getter)和赋值(setter)。到底是取值还是赋值，由函数的参数决定。需要注意的是，如果结果集包含多个元素，那么赋值的时候，将对其中所有的元素赋值;取值的时候，则是只取出第一个元素的值(.text()例外，它取出所有元素的text内容)。 (5).元素的操作：移动如果要移动选中的元素，有两种方法：一种是直接移动该元素，另一种是移动其他元素，使得目标元素达到我们想要的位置。 (6).元素的操作：复制、删除和创建复制元素使用.clone()。删除元素使用.remove()和.detach()。两者的区别在于，前者不保留被删除元素的事件，后者保留，有利于重新插入文档时使用。清空元素内容(但是不删除该元素)使用.empty()。 (7).工具方法除了对选中的元素进行操作以外，jQuery还提供一些工具方法(utility)，不必选中元素，就可以直接使用。如果你懂得Javascript语言的继承原理，那么就能理解工具方法的实质。它是定义在jQuery构造函数上的方法，即jQuery.method()，所以可以直接使用。而那些操作元素的方法，是定义在构造函数的prototype对象上的方法，即jQuery.prototype.method()，所以必须生成实例(即选中元素)后使用。如果不理解这种区别，问题也不大，只要把工具方法理解成，是像javascript原生函数那样，可以直接使用的方法就行了。 (8).事件操作jQuery可以对网页元素绑定事件。根据不同的事件，运行相应的函数。 (9).特殊效果jQuery允许对象呈现某些特殊动画效果。]]></content>
      <categories>
        <category>JQuery</category>
      </categories>
      <tags>
        <tag>JQuery</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JavaScript基础面试题]]></title>
    <url>%2F2019%2F03%2F21%2Fjavascript-basics%2F</url>
    <content type="text"><![CDATA[二、JavaScript基础1、javascript的typeof返回哪些数据类型 object number function boolean underfind string 12345678typeof null;//objecttypeof isNaN;//functiontypeof isNaN(123);//booleantypeof [];//object Array.isArray(); //es5toString.call([]);//”[object Array]”var arr=[];arr.constructor;//Array 2、例举3种强制类型转换和2种隐式类型转换? 强制（parseInt,parseFloat,Number()） 隐式（==） 1==”1”//true null==undefined//true 3、split() join() 的区别 split是切割成数组的形式， join是将数组转换成字符串 4、数组方法pop() push() unshift() shift() push()尾部添加 pop()尾部删除 unshift()头部添加 shift()头部删除 5、事件绑定和普通事件有什么区别传统事件绑定和符合W3C标准的事件绑定有什么区别？12div1.onclick=function()&#123;&#125;;&lt;button onmouseover=””&gt;&lt;/button&gt; 如果说给同一个元素绑定了两次或者多次相同类型的事件，那么后面的绑定会覆盖前面的绑定 不支持DOM事件流 事件捕获阶段目标元素阶段=&gt;事件冒泡阶段 addEventListener 如果说给同一个元素绑定了两次或者多次相同类型的事件，所以的绑定将会依次触发 支持DOM事件流的 进行事件绑定传参不需要on前端12addEventListener(“click”,function()&#123;&#125;,true);//此时的事件就是在事件冒泡阶段执行 ie9开始，ie11 edge：addEventListener ie9以前：attachEvent(&#39;onclick&#39;)/detachEvent(&#39;onclick&#39;) 进行事件类型传参需要带上on前缀 这种方式只支持事件冒泡，不支持事件捕获事件绑定是指把事件注册到具体的元素之上，普通事件指的是可以用来注册的事件 事件委托是什么符合W3C标准的事件绑定addEventLisntener /attachEvent让利用事件冒泡的原理，让自己的所触发的事件，让他的父元素代替执行！ IE和DOM事件流的区别 执行顺序不一样 参数不一样 事件加不加on this指向问题 6、IE和标准下有哪些兼容性的写法123var ev = ev || window.event;document.documentElement.clientWidth || document.body.clientWidth;var target = ev.srcElement || ev.target; 7、call和apply的区别call和apply相同点：都是为了用一个本不属于一个对象的方法，让这个对象去执行1234toString.call([],1,2,3)toString.apply([],[1,2,3])Object.call(this,obj1,obj2,obj3)Object.apply(this,arguments) 8、、JavaScript this指针、闭包、作用域 this：指向调用上下文 闭包：内层作用域可以访问外层作用域的变量 闭包就是能够读取其他函数内部变量的函数。 闭包的缺点：滥用闭包函数会造成内存泄露，因为闭包中引用到的包裹函数中定义的变量都永远不会被释放，所以我们应该在必要的时候，及时释放这个闭包函数 作用域：定义一个函数就开辟了一个局部作用域，整个js执行环境有一个全局作用域 9、如何阻止事件冒泡和默认事件12e.stopPropagation();//标准浏览器event.canceBubble=true;//ie9之前 阻止默认事件：为了不让a点击之后跳转，我们就要给他的点击事件进行阻止12return false; e.preventDefault(); 10、添加、删除、替换、插入到某个接点的方法12345obj.appendChild()//向节点添加最后一个子节点 obj.insertBefore() //指定的已有子节点之前插入新的子节点；//原生的js中不提供insertAfter();obj.replaceChild()//替换obj.removeChild()//删除 11、javascript的本地对象，内置对象和宿主对象 本地对象为array obj regexp等可以new实例化 内置对象为Global Math 等不可以实例化的 宿主为浏览器自带的document,window 等12、document load和document ready的区别 Document.onload 是在结构和样式加载完才执行js window.onload：不仅仅要在结构和样式加载完，还要执行完所有的样式、图片这些资源文件，全部加载完才会触发window.onload事件 Document.ready原生种没有这个方法，jquery中有 $().ready(function)13、”==”和“===”的不同 前者会自动转换类型、后者不会 121==”1”null==undefined ===先判断左右两边的数据类型，如果数据类型不一致，直接返回false之后才会进行两边值的判断 14、javascript的同源策略 一段脚本只能读取来自于同一来源的窗口和文档的属性，这里的同一来源指的是主机名、协议和端口号的组合 http,ftp:协议 主机名；localhost 端口名：80(http协议的默认端口) https:默认端口是8083同源策略带来的麻烦：ajax在不同域名下的请求无法实现，如果说想要请求其他来源的js文件，或者json数据，那么可以通过jsonp来解决15、编写一个数组去重的方法1var arr=[1,1,3,4,2,4,7];=&gt;[1,3,4,2,7]; 一个比较简单的实现就是： 先创建一个空数组，用来保存最终的结果 循环原数组中的每个元素 再对每个元素进行二次循环，判断是否有与之相同的元素，如果没有，将把这个元素放到新数组中 返回这个新数组1234567891011function oSort(arr) &#123; var result =&#123;&#125;; var newArr=[]; arr.forEach(item=&gt;&#123; if(!result[item]) &#123; newArr.push(item) result[arr]=1 &#125; &#125;); return newArr&#125; 16、JavaScript是一门什么样的语言，它有哪些特点？ 运行环境：浏览器中的JS引擎（v8） 语言特性：面向对象，动态语言： 123//动态语言的特性var num=10;//num是一个数字类型num = "jim";//此时num又变成一个字符串类型 我们把一个变量用来保存不同数据类型的语言称之为一个动态语言 静态语言：c# java c c++ 静态语言在声明一个变量就已经确定了这个变量的数据类型， 而且在任何时候都不可以改变他的数据类型 17、JavaScript的数据类型都有什么？ 基本数据类型：String,Boolean,number,undefined,object,Null 引用数据类型：Object(Array,Date,RegExp,Function) 那么问题来了，如何判断某变量是否为数组数据类型？ 方法一. 判断其是否具有“数组性质”，如slice()方法。可自己给该变量定义slice方法，故有时会失效 方法二. obj instanceof Array在某些IE版本中不正确 方法三. 方法一二皆有漏洞，在ECMA Script5中定义了新方法Array.isArray(), 保证其兼容性，最好的方法如下： 12toString.call(18);//”[object Number]”toString.call(“”);//”[object String]” 解析这种简单的数据类型直接通过typeof就可以直接判断 1234567//toString.call常用于判断数组、正则这些复杂类型toString.call(/[0-9]&#123;10&#125;/)//”[object RegExp]”if(typeof Array.isArray==="undefined")&#123; Array.isArray = function(arg)&#123; return Object.prototype.toString.call(arg)==="[object Array]" &#125;;&#125; 18、已知ID的Input输入框，希望获取这个输入框的输入值，怎么做？(不使用第三方框架)1document.getElementById(“ID”).value 19、希望获取到页面中所有的checkbox怎么做？(不使用第三方框架)12345678var domList = document.getElementsByTagName(‘input’)var checkBoxList = [];//返回的所有的checkboxvar len = domList.length;//缓存到局部变量while (len--) &#123;//使用while的效率会比for循环更高 if (domList[len].type == ‘checkbox’) &#123; checkBoxList.push(domList[len]); &#125;&#125; 20、设置一个已知ID的DIV的html内容为xxxx，字体颜色设置为黑色(不使用第三方框架)123var dom = document.getElementById(“ID”);dom.innerHTML = “xxxx”dom.style.color = “#000” 21、当一个DOM节点被点击时候，我们希望能够执行一个函数，应该怎么做？ 直接在DOM里绑定事件：&lt;div&gt;&lt;/div&gt; 在JS里通过onclick绑定：xxx.onclick = test 通过事件添加进行绑定：addEventListener(xxx, ‘click’, test) 那么问题来了，Javascript的事件流模型都有什么？ “事件冒泡”：事件开始由最具体的元素接受，然后逐级向上传播 “事件捕捉”：事件由最不具体的节点先接收，然后逐级向下，一直到最具体的 “DOM事件流”：三个阶段：事件捕捉，目标阶段，事件冒泡22、看下列代码输出为何？解释原因。12345var a;alert(typeof a); // “undefined”//alert(b); // 报错b=10;alert(typeof b);//”number” 解释：undefined是一个只有一个值的数据类型，这个值就是“undefined”，在使用var声明变量但并未对其赋值进行初始化时，这个变量的值就是undefined。而b由于未声明将报错。注意未申明的变量和声明了未赋值的是不一样的。undefined会在以下三种情况下产生： 一个变量定义了却没有被赋值 想要获取一个对象上不存在的属性或者方法: 一个数组中没有被赋值的元素注意区分undefined跟not defnied(语法错误)是不一样的23、看下列代码,输出什么？解释原因。12var a = null;alert(typeof a); //object 解释：null是一个只有一个值的数据类型，这个值就是null。表示一个空指针对象，所以用typeof检测会返回”object”。 24、看下列代码,输出什么？解释原因。123var undefined;//此时undefined这个变量的值是undefinedundefined == null; // true1 == true; // true 此时会把布尔类型的值转换为数字类型 true=1 false=01234562 == true; // false0 == false; // true0 == ''; // trueNaN == NaN; // false[] == false; // true[] == ![]; // true undefined与null相等，但不恒等（===）一个是number一个是string时，会尝试将string转换为number尝试将boolean转换为number，0或1尝试将Object转换成number或string，取决于另外一个对比量的类型所以，对于0、空字符串的判断，建议使用 “===” 。“===”会先判断两边的值类型，类型不匹配时为false。那么问题来了，看下面的代码，输出什么，foo的值为什么？123var foo = "11"+2-"1";console.log(foo);//111console.log(typeof foo); 执行完后foo的值为111，foo的类型为number。 25、看代码给答案。12345var a = new Object();a.value = 1;b = a; //&#123;value:1&#125;b.value = 2;alert(a.value);//2 26、已知数组var stringArray = [“This”, “is”, “Baidu”, “Campus”]，Alert出”This is Baidu Campus”。1alert(stringArray.join("")) 已知有字符串foo=”get-element-by-id”,写一个function将其转化成驼峰表示法”getElementById”。123456789function combo(msg) &#123; var arr = msg.split("-"); //[get,element,by,id] for (var i = 1; i &lt; arr.length; i++) &#123; arr[i] = arr[i].charAt(0).toUpperCase() + arr[i].substr(1, arr[i].length-1); //Element &#125; msg = arr.join(""); //msg=” getElementById” return msg;&#125;(考察基础API) 27、var numberArray = [3,6,2,4,1,5]; （考察基础API）1) 实现对该数组的倒排，输出[5,1,4,2,6,3]1numberArray.reverse();//[5, 1, 4, 2, 6, 3] 2) 实现对该数组的降序排列，输出[6,5,4,3,2,1]123numberArray.sort(function (x,y) &#123; return y-x;&#125;);//[6, 5, 4, 3, 2, 1] 28、输出今天的日期，以YYYY-MM-DD的方式，比如今天是2014年9月26日，则输出2014-09-261234567891011var d = new Date();// 获取年，getFullYear()返回4位的数字var year = d.getFullYear();// 获取月，月份比较特殊，0是1月，11是12月var month = d.getMonth() + 1;// 变成两位month = month &lt; 10 ? '0' + month : month;// 获取日var day = d.getDate();day = day &lt; 10 ? '0' + day : day;alert(year + '-' + month + '-' + day); 29、将字符串”&lt;tr&gt;&lt;td&gt;{$id}&lt;/td&gt;&lt;td&gt;{$name}&lt;/td&gt;&lt;/tr&gt;”中的{$id}替换成10，{$name}替换成Tony （使用正则表达式）1'&lt;tr&gt;&lt;td&gt;&#123;$id&#125;&lt;/td&gt;&lt;td&gt;&#123;$id&#125;_&#123;$name&#125;&lt;/td&gt;&lt;/tr&gt;'.replace(/&#123;\$id&#125;/g, ’10′).replace(/&#123;\$name&#125;/g, ‘Tony’); 30、为了保证页面输出安全，我们经常需要对一些特殊的字符进行转义，请写一个函数escapeHtml，将&lt;, &gt;, &amp;, “进行转义12345678910111213141516function escapeHtml(str) &#123; //[&lt;&gt;”&amp;]:中括号中字符只要其中的一个出现就代表满足条件 //给replace第二个参数传递一个回调函数，回调函数中参数就是匹配结果，如果匹配不到就是null return str.replace(/[&lt;&gt;”&amp;]/g, function(match) &#123; switch (match) &#123; case '&lt;': return '&lt;'; case '&gt;': return '&gt;'; case '&amp;': return '&amp;amp;'; case '”': return '&amp;quot;'; &#125; &#125;);&#125; 31、foo = foo||bar ，这行代码是什么意思？为什么要这样写？这种写法称之为短路表达式答案：if(!foo) foo = bar; //如果foo存在，值不变，否则把bar的值赋给foo。短路表达式：作为”&amp;&amp;”和”||”操作符的操作数表达式，这些表达式在进行求值时，只要最终的结果已经可以确定是真或假，求值过程便告终止，这称之为短路求值。注意if条件的真假判定，记住以下是false的情况：空字符串、false、undefined、null、0 32、看下列代码，将会输出什么?(变量声明提升)123456var foo = 1;function()&#123; console.log(foo); var foo = 2; console.log(foo);&#125; 答案：输出undefined和 2。上面代码相当于：1234567var foo = 1;function()&#123; var foo; console.log(foo); //undefined foo = 2; console.log(foo); // 2; &#125; 函数声明与变量声明会被JavaScript引擎隐式地提升到当前作用域的顶部，但是只提升名称不会提升赋值部分。 33、用js实现随机选取10–100之间的10个数字，存入一个数组，并排序。1234567891011var iArray = []; function getRandom (istart, iend) &#123; var iChoice = iend - istart + 1; return Math.floor( Math.random() * iChoice + istart);&#125;//Math.random()就是获取0-1之间的随机数（永远获取不到1）for (var i=0; i &lt; 10; i++) &#123; var result= getRandom(10,100); iArray.push(result);&#125;iArray.sort(); 34、把两个数组合并，并删除第二个元素。1234var array1 = ['a','b','c'];var bArray = ['d','e','f'];var cArray = array1.concat(bArray);cArray.splice(1,1); 35、怎样添加、移除、移动、复制、创建和查找节点（原生JS，实在基础，没细写每一步） 创建新节点 123createDocumentFragment() //创建一个DOM片段createElement() //创建一个具体的元素createTextNode() //创建一个文本节点 添加、移除、替换、插入 1234appendChild() //添加removeChild() //移除replaceChild() //替换insertBefore() //插入 查找 123getElementsByTagName() //通过标签名称getElementsByName() //通过元素的Name属性的值getElementById() //通过元素Id，唯一性 36、有这样一个URL：http://item.taobao.com/item.htm?a=1&amp;b=2&amp;c=&amp;d=xxx&amp;e，请写一段JS程序提取URL中的各个GET参数(参数名和参数个数不确定)，将其按key-value形式返回到一个json结构中，如{a:’1′, b:’2′, c:”, d:’xxx’, e:undefined}。123456789function serilizeUrl(url) &#123; var result = &#123;&#125;; url = url.split("?")[1]; var map = url.split("&amp;"); for(var i = 0, len = map.length; i &lt; len; i++) &#123; result[map[i].split("=")[0]] = map[i].split("=")[1]; &#125; return result;&#125; 37、正则表达式构造函数var reg=new RegExp(“xxx”)与正则表达字面量var reg=//有什么不同？匹配邮箱的正则表达式？答案：当使用RegExp()构造函数的时候，不仅需要转义引号（即\”表示”），并且还需要双反斜杠（即\\表示一个\）。使用正则表达字面量的效率更高。邮箱的正则匹配：1var regMail = /^([a-zA-Z0-9_-])+@([a-zA-Z0-9_-])+((.[a-zA-Z0-9_-]&#123;2,3&#125;)&#123;1,2&#125;)$/; 看下面代码，给出输出结果。12345for (var i=1; i &lt;= 3; i++) &#123; setTimeout(function () &#123; console.log(i); &#125;,0); &#125;; 答案：4 4 4。原因：Javascript事件处理器在线程空闲之前不会运行。追问，如何让上述代码输出1 2 3？12345678for (var i=1 ;i &lt;= 3 ; i++) &#123; setTimeout( (function (a) &#123; //改成立即执行函数 console.log(a); &#125;) (i) , 0 ); &#125;;1 //输出23 38、写一个function，清除字符串前后的空格。（兼容所有浏览器）使用自带接口trim()，考虑兼容性：123456789if (!String.prototype.trim) &#123; String.prototype.trim = function() &#123; return this.replace(/^\s+/, "").replace(/\s+$/,""); //\s匹配空白字符：回车、换行、制表符tab空格 &#125; &#125; // test the function var str = " \t\n test string ".trim(); alert(str == "test string"); // alerts "true" 39、Javascript中callee和caller的作用？arguments.callee：获得当前函数的引用caller是返回一个对函数的引用，该函数调用了当前函数；callee是返回正在被执行的function函数，也就是所指定的function对象的正文。那么问题来了？如果一对兔子每月生一对兔子；一对新生兔，从第二个月起就开始生兔子；假定每对兔子都是一雌一雄，试问一对兔子，第n个月能繁殖成多少对兔子？（使用callee完成）12345678910111213141516var result=[];function fn(n)&#123; //典型的斐波那契数列 if(n==1)&#123; return 1; &#125;else if(n==2)&#123; return 1; &#125;else&#123; if(result[n])&#123; return result[n]; &#125;else&#123; //argument.callee()表示fn() result[n]=arguments.callee(n-1)+arguments.callee(n-2); return result[n]; &#125; &#125;&#125;]]></content>
      <categories>
        <category>面试题</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[HTML和CSS面试题]]></title>
    <url>%2F2019%2F03%2F21%2Fhtml-css%2F</url>
    <content type="text"><![CDATA[一、HTML和CSS1、你做的页面在哪些流览器测试过？这些浏览器的内核分别是什么? IE: trident内核 Firefox：gecko内核 Safari:webkit内核 Opera:以前是presto内核，Opera现已改用Google Chrome的Blink内核 Chrome:Blink(基于webkit，Google与Opera Software共同开发) 2、每个HTML文件里开头都有个很重要的东西，Doctype，知道这是干什么的吗？严格模式与混杂模式的区别？ &lt;!DOCTYPE&gt; 声明位于文档中的最前面，处于 &lt;html&gt; 标签之前。告知浏览器的解析器，用什么文档类型规范来解析这个文档。 严格模式的排版和 JS 运作模式是以该浏览器支持的最高标准运行。 在混杂模式中，页面以宽松的向后兼容的方式显示。模拟老式浏览器的行为以防止站点无法工作。 DOCTYPE不存在或格式不正确会导致文档以混杂模式呈现。 3、Quirks模式是什么？它和Standards模式有什么区别 从IE6开始，引入了Standards模式，标准模式中，浏览器尝试给符合标准的文档在规范上的正确处理达到在指定浏览器中的程度。 在IE6之前CSS还不够成熟，所以IE5等之前的浏览器对CSS的支持很差， IE6将对CSS提供更好的支持，然而这时的问题就来了，因为有很多页面是基于旧的布局方式写的，而如果IE6 支持CSS则将令这些页面显示不正常，如何在即保证不破坏现有页面，又提供新的渲染机制呢？ 在写程序时我们也会经常遇到这样的问题，如何保证原来的接口不变，又提供更强大的功能，尤其是新功能不兼容旧功能时。遇到这种问题时的一个常见做法是增加参数和分支，即当某个参数为真时，我们就使用新功能，而如果这个参数 不为真时，就使用旧功能，这样就能不破坏原有的程序，又提供新功能。IE6也是类似这样做的，它将DTD当成了这个“参数”，因为以前的页面大家都不会去写DTD，所以IE6就假定 如果写了DTD，就意味着这个页面将采用对CSS支持更好的布局，而如果没有，则采用兼容之前的布局方式。这就是Quirks模式（怪癖模式，诡异模式，怪异模式）。 区别： 总体会有布局、样式解析和脚本执行三个方面的区别。盒模型：在W3C标准中，如果设置一个元素的宽度和高度，指的是元素内容的宽度和高度，而在Quirks 模式下，IE的宽度和高度还包含了padding和border。设置行内元素的高宽：在Standards模式下，给&lt;span&gt;等行内元素设置wdith和height都不会生效，而在quirks模式下，则会生效。 设置百分比的高度：在standards模式下，一个元素的高度是由其包含的内容来决定的，如果父元素没有设置百分比的高度，子元素设置一个百分比的高度是无效的用margin:0 auto设置水平居中：使用margin:0 auto在standards模式下可以使元素水平居中，但在quirks模式下却会失效。 （还有很多，答出什么不重要，关键是看他答出的这些是不是自己经验遇到的，还是说都是看文章看的，甚至完全不知道。） 4、div+css的布局较table布局有什么优点？ 改版的时候更方便 只要改css文件。 页面加载速度更快、结构化清晰、页面显示简洁。 表现与结构相分离。 易于优化（seo）搜索引擎更友好，排名更容易靠前。 5、 img的alt与title有何异同？strong与em的异同？ a:alt(alt text):为不能显示图像、窗体或applets的用户代理（UA），alt属性用来指定替换文字。替换文字的语言由lang属性指定。(在IE浏览器下会在没有title时把alt当成 tool tip显示) title(tool tip):该属性为设置该属性的元素提供建议性的信息。 strong:粗体强调标签，强调，表示内容的重要性 em:斜体强调标签，更强烈强调，表示内容的强调点 6、你能描述一下渐进增强和优雅降级之间的不同吗? 渐进增强 progressive enhancement：针对低版本浏览器进行构建页面，保证最基本的功能，然后再针对高级浏览器进行效果、交互等改进和追加功能达到更好的用户体验。 优雅降级 graceful degradation：一开始就构建完整的功能，然后再针对低版本浏览器进行兼容。 区别：优雅降级是从复杂的现状开始，并试图减少用户体验的供给，而渐进增强则是从一个非常基础的，能够起作用的版本开始，并不断扩充，以适应未来环境的需要。降级（功能衰减）意味着往回看；而渐进增强则意味着朝前看，同时保证其根基处于安全地带。 “优雅降级”观点 “优雅降级”观点认为应该针对那些最高级、最完善的浏览器来设计网站。而将那些被认为“过时”或有功能缺失的浏览器下的测试工作安排在开发周期的最后阶段，并把测试对象限定为主流浏览器（如 IE、Mozilla 等）的前一个版本。 在这种设计范例下，旧版的浏览器被认为仅能提供“简陋却无妨 (poor, but passable)” 的浏览体验。你可以做一些小的调整来适应某个特定的浏览器。但由于它们并非我们所关注的焦点，因此除了修复较大的错误之外，其它的差异将被直接忽略。 “渐进增强”观点 “渐进增强”观点则认为应关注于内容本身。 内容是我们建立网站的诱因。有的网站展示它，有的则收集它，有的寻求，有的操作，还有的网站甚至会包含以上的种种，但相同点是它们全都涉及到内容。这使得“渐进增强”成为一种更为合理的设计范例。这也是它立即被 Yahoo! 所采纳并用以构建其“分级式浏览器支持 (Graded Browser Support)”策略的原因所在。 那么问题来了。现在产品经理看到IE6,7,8网页效果相对高版本现代浏览器少了很多圆角，阴影（CSS3），要求兼容（使用图片背景，放弃CSS3），你会如何说服他？ 7、为什么利用多个域名来存储网站资源会更有效？ CDN缓存更方便 突破浏览器并发限制 节约cookie带宽 节约主域名的连接数，优化页面响应速度 防止不必要的安全问题 8、请谈一下你对网页标准和标准制定机构重要性的理解。 网页标准和标准制定机构都是为了能让web发展的更‘健康’，开发者遵循统一的标准，降低开发难度，开发成本，SEO也会更好做，也不会因为滥用代码导致各种BUG、安全问题，最终提高网站易用性。 9、请描述一下cookies，sessionStorage和localStorage的区别？ sessionStorage用于本地存储一个会话（session）中的数据，这些数据只有在同一个会话中的页面才能访问并且当会话结束后数据也随之销毁。因此sessionStorage不是一种持久化的本地存储，仅仅是会话级别的存储。而localStorage用于持久化的本地存储，除非主动删除数据，否则数据是永远不会过期的。 web storage和cookie的区别 Web Storage的概念和cookie相似，区别是它是为了更大容量存储设计的。Cookie的大小是受限的，并且每次你请求一个新的页面的时候Cookie都会被发送过去，这样无形中浪费了带宽，另外cookie还需要指定作用域，不可以跨域调用。 除此之外，Web Storage拥有setItem,getItem,removeItem,clear等方法，不像cookie需要前端开发者自己封装setCookie，getCookie。但是Cookie也是不可以或缺的：Cookie的作用是与服务器进行交互，作为HTTP规范的一部分而存在 ，而Web Storage仅仅是为了在本地“存储”数据而生。 10、简述一下src与href的区别。 src用于替换当前元素，href用于在当前文档和引用资源之间确立联系。 src是source的缩写，指向外部资源的位置，指向的内容将会嵌入到文档中当前标签所在位置；在请求src资源时会将其指向的资源下载并应用到文档内，例如js脚本，img图片和frame等元素。 1&lt;script src =”js.js”&gt;&lt;/script&gt; 当浏览器解析到该元素时，会暂停其他资源的下载和处理，直到将该资源加载、编译、执行完毕，图片和框架等元素也如此，类似于将所指向资源嵌入当前标签内。这也是为什么将js脚本放在底部而不是头部。 href是Hypertext Reference的缩写，指向网络资源所在位置，建立和当前元素（锚点）或当前文档（链接）之间的链接，如果我们在文档中添加 1&lt;link href=”common.css” rel=”stylesheet”/&gt; 那么浏览器会识别该文档为css文件，就会并行下载资源并且不会停止对当前文档的处理。这也是为什么建议使用link方式来加载css，而不是使用@import方式。 11、知道的网页制作会用到的图片格式有哪些？ png-8，png-24，jpeg，gif，svg。 但是上面的那些都不是面试官想要的最后答案。面试官希望听到是Webp。（是否有关注新技术，新鲜事物） 科普一下Webp：WebP格式，谷歌（google）开发的一种旨在加快图片加载速度的图片格式。图片压缩体积大约只有JPEG的2/3，并能节省大量的服务器带宽资源和数据空间。Facebook Ebay等知名网站已经开始测试并使用WebP格式。 在质量相同的情况下，WebP格式图像的体积要比JPEG格式图像小40% 12、知道什么是微格式吗？谈谈理解。在前端构建中应该考虑微格式吗？ 微格式（Microformats）是一种让机器可读的语义化XHTML词汇的集合，是结构化数据的开放标准。是为特殊应用而制定的特殊格式。 优点：将智能数据添加到网页上，让网站内容在搜索引擎结果界面可以显示额外的提示。（应用范例：豆瓣，有兴趣自行google） 13、在css/js代码上线之后开发人员经常会优化性能，从用户刷新网页开始，一次js请求一般情况下有哪些地方会有缓存处理？ dns缓存，cdn缓存，浏览器缓存，服务器缓存。 14、一个页面上有大量的图片（大型电商网站），加载很慢，你有哪些方法优化这些图片的加载，给用户更好的体验。 图片懒加载，在页面上的未可视区域可以添加一个滚动条事件，判断图片位置与浏览器顶端的距离与页面的距离，如果前者小于后者，优先加载。 如果为幻灯片、相册等，可以使用图片预加载技术，将当前展示图片的前一张和后一张优先下载。 如果图片为css图片，可以使用CSSsprite、SVGsprite、Iconfont、Base64等技术。 如果图片过大，可以使用特殊编码的图片，加载时会先加载一张压缩的特别厉害的缩略图，以提高用户体验。 如果图片展示区域小于图片的真实大小，则因在服务器端根据业务需要先行进行图片压缩，图片压缩后大小与展示一致。 15、你如何理解HTML结构的语义化？ 去掉或样式丢失的时候能让页面呈现清晰的结构： html本身是没有表现的，我们看到例如&lt;h1&gt;是粗体，字体大小2em，加粗；&lt;strong&gt;是加粗的，不要认为这是html的表现，这些其实html默认的css样式在起作用，所以去掉或样式丢失的时候能让页面呈现清晰的结构不是语义化的HTML结构的优点，但是浏览器都有有默认样式，默认样式的目的也是为了更好的表达html的语义，可以说浏览器的默认样式和语义化的HTML结构是不可分割的。 屏幕阅读器（如果访客有视障）会完全根据你的标记来“读”你的网页. 例如,如果你使用的含语义的标记,屏幕阅读器就会“逐个拼出”你的单词,而不是试着去对它完整发音. PDA、手机等设备可能无法像普通电脑的浏览器一样来渲染网页（通常是因为这些设备对CSS的支持较弱） 使用语义标记可以确保这些设备以一种有意义的方式来渲染网页.理想情况下,观看设备的任务是符合设备本身的条件来渲染网页. 语义标记为设备提供了所需的相关信息,就省去了你自己去考虑所有可能的显示情况（包括现有的或者将来新的设备）.例如,一部手机可以选择使一段标记了标题的文字以粗体显示.而掌上电脑可能会以比较大的字体来显示.无论哪种方式一旦你对文本标记为标题,您就可以确信读取设备将根据其自身的条件来合适地显示页面. 搜索引擎的爬虫也依赖于标记来确定上下文和各个关键字的权重 过去你可能还没有考虑搜索引擎的爬虫也是网站的“访客”,但现在它们他们实际上是极其宝贵的用户.没有他们的话,搜索引擎将无法索引你的网站,然后一般用户将很难过来访问. 你的页面是否对爬虫容易理解非常重要,因为爬虫很大程度上会忽略用于表现的标记,而只注重语义标记. 因此,如果页面文件的标题被标记,而不是,那么这个页面在搜索结果的位置可能会比较靠后.除了提升易用性外,语义标记有利于正确使用CSS和JavaScript,因为其本身提供了许多“钩钩”来应用页面的样式与行为. SEO主要还是靠你网站的内容和外部链接的。 便于团队开发和维护 W3C给我们定了一个很好的标准，在团队中大家都遵循这个标准，可以减少很多差异化的东西，方便开发和维护，提高开发效率，甚至实现模块化开发。 16、谈谈以前端角度出发做好SEO需要考虑什么？ 了解搜索引擎如何抓取网页和如何索引网页 你需要知道一些搜索引擎的基本工作原理，各个搜索引擎之间的区别，搜索机器人（SE robot 或叫 web crawler）如何进行工作，搜索引擎如何对搜索结果进行排序等等。 Meta标签优化 主要包括主题（Title)，网站描述(Description)，和关键词（Keywords）。还有一些其它的隐藏文字比如Author（作者），Category（目录），Language（编码语种）等。 如何选取关键词并在网页中放置关键词 搜索就得用关键词。关键词分析和选择是SEO最重要的工作之一。首先要给网站确定主关键词（一般在5个上下），然后针对这些关键词进行优化，包括关键词密度（Density），相关度（Relavancy），突出性（Prominency）等等。 了解主要的搜索引擎 虽然搜索引擎有很多，但是对网站流量起决定作用的就那么几个。比如英文的主要有Google，Yahoo，Bing等；中文的有百度，搜狗，有道等。不同的搜索引擎对页面的抓取和索引、排序的规则都不一样。还要了解各搜索门户和搜索引擎之间的关系，比如AOL网页搜索用的是Google的搜索技术，MSN用的是Bing的技术。 主要的互联网目录 Open Directory自身不是搜索引擎，而是一个大型的网站目录，他和搜索引擎的主要区别是网站内容的收集方式不同。目录是人工编辑的，主要收录网站主页；搜索引擎是自动收集的，除了主页外还抓取大量的内容页面。 按点击付费的搜索引擎 搜索引擎也需要生存，随着互联网商务的越来越成熟，收费的搜索引擎也开始大行其道。最典型的有Overture和百度，当然也包括Google的广告项目Google Adwords。越来越多的人通过搜索引擎的点击广告来定位商业网站，这里面也大有优化和排名的学问，你得学会用最少的广告投入获得最多的点击。 搜索引擎登录 网站做完了以后，别躺在那里等着客人从天而降。要让别人找到你，最简单的办法就是将网站提交（submit）到搜索引擎。如果你的是商业网站，主要的搜索引擎和目录都会要求你付费来获得收录（比如Yahoo要299美元），但是好消息是（至少到目前为止）最大的搜索引擎Google目前还是免费，而且它主宰着60％以上的搜索市场。 链接交换和链接广泛度（Link Popularity） 网页内容都是以超文本（Hypertext）的方式来互相链接的，网站之间也是如此。除了搜索引擎以外，人们也每天通过不同网站之间的链接来Surfing（“冲浪”）。其它网站到你的网站的链接越多，你也就会获得更多的访问量。更重要的是，你的网站的外部链接数越多，会被搜索引擎认为它的重要性越大，从而给你更高的排名。 合理的标签使用 17、有哪项方式可以对一个DOM设置它的CSS样式？ 外部样式表，引入一个外部css文件 内部样式表，将css代码放在 &lt;head&gt;标签内部 内联样式，将css样式直接定义在 HTML 元素内部 18、CSS都有哪些选择器？ 派生选择器（用HTML标签申明） id选择器（用DOM的ID申明） 类选择器（用一个样式类名申明） 属性选择器（用DOM的属性申明，属于CSS2，IE6不支持，不常用，不知道就算了） 除了前3种基本选择器，还有一些扩展选择器，包括 后代选择器（利用空格间隔，比如div .a{ }） 群组选择器（利用逗号间隔，比如p,div,#a{ }） 那么问题来了，CSS选择器的优先级是怎么样定义的？ 基本原则： 一般而言，选择器越特殊，它的优先级越高。也就是选择器指向的越准确，它的优先级就越高。 复杂的计算方法： 用1表示派生选择器的优先级 用10表示类选择器的优先级 用100标示ID选择器的优先级div.test1 .span var优先级1+10 +10 +1span#xxx .songs li优先级1+100 + 10 + 1#xxx li优先级 100 +1 那么问题来了，看下列代码，&lt;p&gt;标签内的文字是什么颜色的？ 1234567&lt;style&gt; .classA&#123; color:blue;&#125; .classB&#123; color:red;&#125;&lt;/style&gt;&lt;body&gt; &lt;p class='classB classA'&gt; 123 &lt;/p&gt;&lt;/body&gt; 答案：red。与样式定义在文件中的先后顺序有关，即是后面的覆盖前面的，与在&lt;p class=’classB classA’&gt;中的先后关系无关。 19、CSS中可以通过哪些属性定义，使得一个DOM元素不显示在浏览器可视范围内？ 最基本的：设置display属性为none，或者设置visibility属性为hidden 技巧性：设置宽高为0，设置透明度为0，设置z-index位置在-1000 20、超链接访问过后hover样式就不出现的问题是什么？如何解决？ 被点击访问过的超链接样式不在具有hover和active了,解决方法是改变CSS属性的排列顺序:L-V-H-A（link,visited,hover,active） 21、什么是Css Hack？ie6,7,8的hack分别是什么？ 针对不同的浏览器写不同的CSS code的过程，就是CSS hack。示例如下： 12345678910111213141516#test&#123; width:300px; height:300px; background-color:blue;/*firefox*/ background-color:red\9;/*all ie*/ background-color:yellow;/*ie8*/ +background-color:pink; /*ie7*/ _background-color:orange;/*ie6*/&#125;:root #test &#123; background-color:purple\9; &#125;/*ie9*/@media all and (min-width:0px)&#123; #test &#123;background-color:black;&#125;&#125;/*opera*/@media screen and (-webkit-min-device-pixel-ratio:0)&#123; #test &#123;background-color:gray;&#125;&#125;/*chrome and safari*/ 22、请用Css写一个简单的幻灯片效果页面 答案：知道是要用css3。使用animation动画实现一个简单的幻灯片效果。1234567891011121314151617181920212223242526272829.ani&#123; width:480px; height:320px; margin:50px auto; overflow: hidden; box-shadow:0 0 5px rgba(0,0,0,1); background-size: cover; background-position: center; -webkit-animation-name: "loops"; -webkit-animation-duration: 20s; -webkit-animation-iteration-count: infinite;&#125;@-webkit-keyframes "loops" &#123; 0% &#123; background:url(http://d.hiphotos.baidu.com/image/w%3D400/sign=c01e6adca964034f0fcdc3069fc27980/e824b899a9014c08e5e38ca4087b02087af4f4d3.jpg) no-repeat; &#125; 25% &#123; background:url(http://b.hiphotos.baidu.com/image/w%3D400/sign=edee1572e9f81a4c2632edc9e72b6029/30adcbef76094b364d72bceba1cc7cd98c109dd0.jpg) no-repeat; &#125; 50% &#123; background:url(http://b.hiphotos.baidu.com/image/w%3D400/sign=937dace2552c11dfded1be2353266255/d8f9d72a6059252d258e7605369b033b5bb5b912.jpg) no-repeat; &#125; 75% &#123; background:url(http://g.hiphotos.baidu.com/image/w%3D400/sign=7d37500b8544ebf86d71653fe9f9d736/0df431adcbef76095d61f0972cdda3cc7cd99e4b.jpg) no-repeat; &#125; 100% &#123; background:url(http://c.hiphotos.baidu.com/image/w%3D400/sign=cfb239ceb0fb43161a1f7b7a10a54642/3b87e950352ac65ce2e73f76f9f2b21192138ad1.jpg) no-repeat; &#125;&#125; 24、行内元素和块级元素的具体区别是什么？行内元素的padding和margin可设置吗？ 块级元素(block)特性： 总是独占一行，表现为另起一行开始，而且其后的元素也必须另起一行显示; 宽度(width)、高度(height)、内边距(padding)和外边距(margin)都可控制; 内联元素(inline)特性： 和相邻的内联元素在同一行; 宽度(width)、高度(height)、内边距的top/bottom(padding-top/padding-bottom)和外边距的top/bottom(margin-top/margin-bottom)都不可改变（也就是padding和margin的left和right是可以设置的），就是里面文字或图片的大小。 那么问题来了，浏览器还有默认的天生inline-block元素（拥有内在尺寸，可设置高宽，但不会自动换行），有哪些？ 答案：&lt;input /&gt; 、&lt;img /&gt; 、&lt;button&gt;&lt;/button&gt; 、&lt;texterea&gt;&lt;/texterea&gt; 、&lt;label&gt;&lt;/label&gt;。 25、什么是外边距重叠？重叠的结果是什么？ 外边距重叠就是·margin-collapse·。 在CSS当中，相邻的两个盒子（可能是兄弟关系也可能是祖先关系）的外边距可以结合成一个单独的外边距。这种合并外边距的方式被称为折叠，并且因而所结合成的外边距称为折叠外边距。 折叠结果遵循下列计算规则： 两个相邻的外边距都是正数时，折叠结果是它们两者之间较大的值。 两个相邻的外边距都是负数时，折叠结果是两者绝对值的较大值。 两个外边距一正一负时，折叠结果是两者的相加的和。 26、rgba()和opacity的透明效果有什么不同？ rgba()和opacity都能实现透明效果，但最大的不同是opacity作用于元素，以及元素内的所有内容的透明度， 而rgba()只作用于元素的颜色或其背景色。（设置rgba透明的元素的子元素不会继承透明效果！） 27、css中可以让文字在垂直和水平方向上重叠的两个属性是什么？ 垂直方向：line-height 水平方向：letter-spacing 那么问题来了，关于letter-spacing的妙用知道有哪些么？ 答案:可以用于消除inline-block元素间的换行符空格间隙问题。 28、如何垂直居中一个浮动元素？// 方法一：已知元素的高宽 12345678910#div1&#123; background-color:#6699FF; width:200px; height:200px; position: absolute;//父元素需要相对定位 top: 50%; left: 50%; margin-top:-100px ;//二分之一的height，width margin-left: -100px;&#125; //方法二:未知元素的高宽 1234567891011#div1&#123; width: 200px; height: 200px; background-color: #6699FF; margin:auto; position: absolute;//父元素需要相对定位 left: 0; top: 0; right: 0; bottom: 0;&#125; 那么问题来了，如何垂直居中一个&lt;img /&gt;?（用更简便的方法。）123456#container&#123; //`&lt;img /&gt;`的容器设置如下 display:table-cell; text-align:center; vertical-align:middle;&#125; 29、px和em的区别。 px和em都是长度单位，区别是，px的值是固定的，指定是多少就是多少，计算比较容易。em得值不是固定的，并且em会继承父级元素的字体大小。 浏览器的默认字体高都是16px。所以未经调整的浏览器都符合: 1em=16px。那么12px=0.75em, 10px=0.625em。 30、描述一个”reset”的CSS文件并如何使用它。知道normalize.css吗？你了解他们的不同之处？ 重置样式非常多，凡是一个前端开发人员肯定有一个常用的重置CSS文件并知道如何使用它们。他们是盲目的在做还是知道为什么这么做呢？原因是不同的浏览器对一些元素有不同的默认样式，如果你不处理，在不同的浏览器下会存在必要的风险，或者更有戏剧性的性发生。 你可能会用Normalize来代替你的重置样式文件。它没有重置所有的样式风格，但仅提供了一套合理的默认样式值。既能让众多浏览器达到一致和合理，但又不扰乱其他的东西（如粗体的标题）。 在这一方面，无法做每一个复位重置。它也确实有些超过一个重置，它处理了你永远都不用考虑的怪癖，像HTML的audio元素不一致或line-height不一致。 31、Sass、LESS是什么？大家为什么要使用他们？ 他们是CSS预处理器。他是CSS上的一种抽象层。他们是一种特殊的语法/语言编译成CSS。例如Less是一种动态样式语言. 将CSS赋予了动态语言的特性，如变量，继承，运算， 函数. LESS 既可以在客户端上运行 (支持IE 6+, Webkit, Firefox)，也可一在服务端运行 (借助 Node.js)。 为什么要使用它们？ 结构清晰，便于扩展。 可以方便地屏蔽浏览器私有语法差异。这个不用多说，封装对浏览器语法差异的重复处理，减少无意义的机械劳动。 可以轻松实现多重继承。 完全兼容CSS代码，可以方便地应用到老项目中。LESS 只是在 CSS 语法上做了扩展，所以老的 CSS 代码也可以与LESS代码一同编译。 32、display:none与visibility:hidden的区别是什么？ display : 隐藏对应的元素但不挤占该元素原来的空间。 visibility: 隐藏对应的元素并且挤占该元素原来的空间。 即是，使用CSS display:none属性后，HTML元素（对象）的宽度、高度等各种属性值都将“丢失”;而使用visibility:hidden属性后，HTML元素（对象）仅仅是在视觉上看不见（完全透明），而它所占据的空间位置仍然存在。 34、CSS中link和@import的区别是： Link属于html标签，而@import是CSS中提供的 在页面加载的时候，link会同时被加载，而@import引用的CSS会在页面加载完成后才会加载引用的CSS @import只有在ie5以上才可以被识别，而link是html标签，不存在浏览器兼容性问题 Link引入样式的权重大于@import的引用（@import是将引用的样式导入到当前的页面中） 35、简介盒子模型： CSS的盒子模型有两种：IE盒子模型、标准的W3C盒子模型模型 盒模型：内容、内边距、外边距（一般不计入盒子实际宽度）、边框 36、为什么要初始化样式？ 由于浏览器兼容的问题，不同的浏览器对标签的默认样式值不同，若不初始化会造成不同浏览器之间的显示差异 但是初始化CSS会对搜索引擎优化造成小影响 37、BFC是什么? BFC（块级格式化上下文），一个创建了新的BFC的盒子是独立布局的，盒子内元素的布局不会影响盒子外面的元素。在同一个BFC中的两个相邻的盒子在垂直方向发生margin重叠的问题 BFC是指浏览器中创建了一个独立的渲染区域，该区域内所有元素的布局不会影响到区域外元素的布局，这个渲染区域只对块级元素起作用 38、html语义化是什么？ 当页面样式加载失败的时候能够让页面呈现出清晰的结构 有利于seo优化，利于被搜索引擎收录（更便于搜索引擎的爬虫程序来识别） 便于项目的开发及维护，使html代码更具有可读性，便于其他设备解析。 39、HTML与XHTML二者有什么区别？ 所有的标记都必须要有一个相应的结束标记 所有标签的元素和属性的名字都必须使用小写 所有的 XML 标记都必须合理嵌套 所有的属性必须用引号 &quot;&quot; 括起来 把所有 &lt;和 &amp;特殊符号用编码表示 给所有属性赋一个值 不要在注释内容中使用 &quot;--&quot; 图片必须有说明文字 40、html常见兼容性问题？ 双边距BUG float引起的 使用display 3像素问题 使用float引起的 使用dislpay:inline -3px 超链接hover 点击后失效 使用正确的书写顺序 link visited hover active IE z-index问题 给父级添加position:relative PNG透明 使用js代码 改 min-height 最小高度 ！important解决’ select 在ie6下遮盖 使用iframe嵌套 为什么没有办法定义1px左右的宽度容器（IE6默认的行高造成的，使用over:hidden,zoom:0.08 line-height:1px） IE5-8不支持opacity，解决办法： 12345.opacity &#123; opacity: 0.4 filter: alpha(opacity=60); /* for IE5-7 */ -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=60)"; /* for IE 8*/&#125; IE6不支持PNG透明背景，解决办法: IE6下使用GIF图片 41.对WEB标准以及W3C的理解与认识 标签闭合、标签小写、不乱嵌套、提高搜索机器人搜索几率、使用外链css和js脚本、结构行为表现的分离、文件下载与页面速度更快、内容能被更多的用户所访问、内容能被更广泛的设备所访问、更少的代码和组件，容易维护、改版方便，不需要变动页面内容、提供打印版本而不需要复制内容、提高网站易用性。 42.CSS 选择符有哪些？哪些属性可以继承？优先级算法如何计算？ CSS3新增伪类有那些？ 1.id选择器（# myid） 2.类选择器（.myclassname） 3.标签选择器（div, h1, p） 4.相邻选择器（h1 + p） 5.子选择器（ul &lt; li） 6.后代选择器（li a） 7.通配符选择器（*） 8.属性选择器（a[rel = &quot;external&quot;]） 9.伪类选择器（a: hover, li: nth - child） 可继承： font-size font-family color, ul li dl dd dt; 不可继承 ：border padding margin width height ; 优先级就近原则，样式定义最近者为准; 载入样式以最后载入的定位为准;优先级为: !important &gt; id &gt; class &gt; tag important 比 内联优先级高 CSS3新增伪类举例： p:first-of-type 选择属于其父元素的首个 &lt;p&gt; 元素的每个 &lt;p&gt; 元素。 p:last-of-type 选择属于其父元素的最后 &lt;p&gt; 元素的每个 &lt;p&gt; 元素。 p:only-of-type 选择属于其父元素唯一的 &lt;p&gt; 元素的每个 &lt;p&gt;元素。 p:only-child 选择属于其父元素的唯一子元素的每个 &lt;p&gt; 元素。 p:nth-child(2) 选择属于其父元素的第二个子元素的每个 &lt;p&gt; 元素。 :enabled、:disabled控制表单控件的禁用状态。 :checked，单选框或复选框被选中。]]></content>
      <categories>
        <category>面试题</category>
      </categories>
      <tags>
        <tag>HTML</tag>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[你好，HEXO]]></title>
    <url>%2F2019%2F03%2F21%2Fhello-hexo%2F</url>
    <content type="text"></content>
      <tags>
        <tag>HELLO</tag>
      </tags>
  </entry>
</search>
